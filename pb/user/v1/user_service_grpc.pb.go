// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: user/v1/user_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserSearchServiceClient is the client API for UserSearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserSearchServiceClient interface {
	SearchByName(ctx context.Context, in *SearchByNameRequest, opts ...grpc.CallOption) (*SearchByNameResponse, error)
	SearchByGender(ctx context.Context, in *SearchByGenderRequest, opts ...grpc.CallOption) (*SearchByGenderResponse, error)
}

type userSearchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSearchServiceClient(cc grpc.ClientConnInterface) UserSearchServiceClient {
	return &userSearchServiceClient{cc}
}

func (c *userSearchServiceClient) SearchByName(ctx context.Context, in *SearchByNameRequest, opts ...grpc.CallOption) (*SearchByNameResponse, error) {
	out := new(SearchByNameResponse)
	err := c.cc.Invoke(ctx, "/grpc_web_demo.user.v1.UserSearchService/SearchByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSearchServiceClient) SearchByGender(ctx context.Context, in *SearchByGenderRequest, opts ...grpc.CallOption) (*SearchByGenderResponse, error) {
	out := new(SearchByGenderResponse)
	err := c.cc.Invoke(ctx, "/grpc_web_demo.user.v1.UserSearchService/SearchByGender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSearchServiceServer is the server API for UserSearchService service.
// All implementations must embed UnimplementedUserSearchServiceServer
// for forward compatibility
type UserSearchServiceServer interface {
	SearchByName(context.Context, *SearchByNameRequest) (*SearchByNameResponse, error)
	SearchByGender(context.Context, *SearchByGenderRequest) (*SearchByGenderResponse, error)
	mustEmbedUnimplementedUserSearchServiceServer()
}

// UnimplementedUserSearchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserSearchServiceServer struct {
}

func (UnimplementedUserSearchServiceServer) SearchByName(context.Context, *SearchByNameRequest) (*SearchByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByName not implemented")
}
func (UnimplementedUserSearchServiceServer) SearchByGender(context.Context, *SearchByGenderRequest) (*SearchByGenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByGender not implemented")
}
func (UnimplementedUserSearchServiceServer) mustEmbedUnimplementedUserSearchServiceServer() {}

// UnsafeUserSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserSearchServiceServer will
// result in compilation errors.
type UnsafeUserSearchServiceServer interface {
	mustEmbedUnimplementedUserSearchServiceServer()
}

func RegisterUserSearchServiceServer(s grpc.ServiceRegistrar, srv UserSearchServiceServer) {
	s.RegisterService(&UserSearchService_ServiceDesc, srv)
}

func _UserSearchService_SearchByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSearchServiceServer).SearchByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_web_demo.user.v1.UserSearchService/SearchByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSearchServiceServer).SearchByName(ctx, req.(*SearchByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSearchService_SearchByGender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByGenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSearchServiceServer).SearchByGender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_web_demo.user.v1.UserSearchService/SearchByGender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSearchServiceServer).SearchByGender(ctx, req.(*SearchByGenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserSearchService_ServiceDesc is the grpc.ServiceDesc for UserSearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserSearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_web_demo.user.v1.UserSearchService",
	HandlerType: (*UserSearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchByName",
			Handler:    _UserSearchService_SearchByName_Handler,
		},
		{
			MethodName: "SearchByGender",
			Handler:    _UserSearchService_SearchByGender_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/user_service.proto",
}
